const fs = require('fs');
const csv = require('csv-parser');
const { re } = require('mathjs');
const { ChartJSNodeCanvas } = require('chartjs-node-canvas');

const headers = [
  'Timestamp', 'Score',
  ...Array.from({ length: 24 }, (_, i) => `Image_${i + 1}`), // Rename "The image was" columns
  'Gender', 'Age', 'Education', 'Income', 'EmploymentStatus', 'Region'
];

const correctAnswers = {
    Image_1: 'created by a HUMAN',
    Image_2: 'generated by an AI',
    Image_3: 'created by a HUMAN',
    Image_4: 'generated by an AI',
    Image_5: 'generated by an AI',
    Image_6: 'created by a HUMAN',
    Image_7: 'created by a HUMAN',
    Image_8: 'created by a HUMAN',
    Image_9: 'generated by an AI',
    Image_10: 'generated by an AI',
    Image_11: 'created by a HUMAN',
    Image_12: 'generated by an AI',
    Image_13: 'generated by an AI',
    Image_14: 'generated by an AI',
    Image_15: 'generated by an AI',
    Image_16: 'created by a HUMAN',
    Image_17: 'created by a HUMAN',
    Image_18: 'created by a HUMAN',
    Image_19: 'created by a HUMAN',
    Image_20: 'generated by an AI',
    Image_21: 'generated by an AI',
    Image_22: 'created by a HUMAN',
    Image_23: 'generated by an AI',
    Image_24: 'created by a HUMAN'
};

const statistics = {
    totalEntries: 0,
    gender: {
        preferNotToSay: {score: 0, count: 0},
        female: {score: 0, count: 0},
        Male: {score: 0, count: 0},
        NonBinary:{score: 0, count: 0},
    },
    age: {
        preferNotToSay: {score: 0, count: 0},
        under18: {score: 0, count: 0},
        '18-24': {score: 0, count: 0},
        '25-34': {score: 0, count: 0},
        '35-44': {score: 0, count: 0},
        '45-54': {score: 0, count: 0},
        '55-64': {score: 0, count: 0},
        '65+': {score: 0, count: 0},
    },
    education: {
        preferNotToSay: {score: 0, count: 0},
        lessThanHighSchool: {score: 0, count: 0},
        highSchool: {score: 0, count: 0},
        universityDegree: {score: 0, count: 0},
        postgraduateDegree: {score: 0, count: 0},
    },
    income: {
        preferNotToSay: {score: 0, count: 0},
        underMinWage: {score: 0, count: 0},
        betweenMinAndAvgWage: {score: 0, count: 0},
        between1xand1_5xAvgWage: {score: 0, count: 0},
        between1_5xand2xAvgWage: {score: 0, count: 0},
        moreThan2xAvgWage: {score: 0, count: 0},
    },
    employmentStatus: {
        preferNotToSay: {score: 0, count: 0},
        employed: {score: 0, count: 0},
        selfEmployed: {score: 0, count: 0},
        unemployed: {score: 0, count: 0},
        student: {score: 0, count: 0},
        retired: {score: 0, count: 0},
    },
    location: {
        prefer_not_say:  {score: 0, count: 0}, 
        eastern_europe:  {score: 0, count: 0}, 
        central_europe:  {score: 0, count: 0}, 
        western_europe:  {score: 0, count: 0}, 
        northern_europe: {score: 0, count: 0},  
        southern_europe: {score: 0, count: 0},  
        north_america: {score: 0, count: 0},
        central_america_caribbean: {score: 0, count: 0}, 
        south_america: {score: 0, count: 0},  
        northern_africa: {score: 0, count: 0}, 
        sub_saharan_africa: {score: 0, count: 0},
        middle_east: {score: 0, count: 0},
        central_asia: {score: 0, count: 0},
        south_asia:{score: 0, count: 0},
        southeast_asia:{score: 0, count: 0},
        east_asia: {score: 0, count: 0},
        oceania: {score: 0, count: 0},
    }, 
    score:{
        "1": 0,
        "2": 0,
        "3": 0,
        "4": 0,
        "5": 0,
        "6": 0,
        "7": 0,
        "8": 0,
        "9": 0,
        "10": 0,
        "11": 0,
        "12": 0,
        "13": 0,
        "14": 0,
        "15": 0,
        "16": 0,
        "17": 0,
        "18": 0,
        "19": 0,
        "20": 0,
        "21": 0,
        "22": 0,
        "23": 0,
        "24": 0
    }
};

const normalizeLocationJson = {
    "Prefer not to say": "prefer_not_say",
    "Eastern Europe (e.g., Romania, Bulgaria, Ukraine, Moldova, Poland)": "eastern_europe",
    "Central Europe (e.g., Germany, Austria, Switzerland, Czech Republic, Slovakia, Hungary)": "central_europe",
    "Western Europe (e.g., France, Belgium, Netherlands, Luxembourg)": "western_europe",
    "Northern Europe (e.g., Sweden, Norway, Denmark, Finland, Estonia)": "northern_europe",
    "Southern Europe (e.g., Italy, Spain, Portugal, Greece, Croatia)": "southern_europe",
    "North America (e.g., United States, Canada, Mexico)": "north_america",
    "Central America & Caribbean (e.g., Costa Rica, Guatemala, Cuba, Dominican Republic, Jamaica)": "central_america_caribbean",
    "South America (e.g., Brazil, Argentina, Chile, Colombia, Peru)": "south_america",
    "Northern Africa (e.g., Egypt, Morocco, Algeria, Tunisia)": "northern_africa",
    "Sub-Saharan Africa (e.g., Nigeria, Kenya, South Africa, Ghana, Ethiopia)": "sub_saharan_africa",
    "Middle East (e.g., Saudi Arabia, Iran, Israel, Turkey, UAE, Lebanon)": "middle_east",
    "Central Asia (e.g., Kazakhstan, Uzbekistan, Turkmenistan, Kyrgyzstan, Tajikistan)": "central_asia",
    "South Asia (e.g., India, Pakistan, Bangladesh, Sri Lanka, Nepal)": "south_asia",
    "Southeast Asia (e.g., Indonesia, Thailand, Vietnam, Philippines, Malaysia)": "southeast_asia",
    "East Asia (e.g., China, Japan, South Korea, Taiwan, Mongolia)": "east_asia",
    "Oceania / Australia & New Zealand (e.g., Australia, New Zealand, Papua New Guinea, Fiji)": "oceania",
};
const normalizedAgeJson = {
    "Prefer not to say": "preferNotToSay",
    "Under 18": "under18",  
    "18–24": "18-24",
    "25–34": "25-34",
    "35–44": "35-44",
    "45–54": "45-54",
    "55–64": "55-64",
    "65 or older": "65+"
};
const normalizeGenderJson = {
    "Prefer not to respond": "preferNotToSay",
    "Female": "female",
    "Male": "Male",
    "Non-binary": "NonBinary"
}
const normalizedEducationJson = {
    "Prefer not to say": "preferNotToSay",
    "Less than high school": "lessThanHighSchool",
    "High school or equivalent": "highSchool",
    "University degree (Bachelor’s)": "universityDegree",
    "Postgraduate degree (Master’s, PhD)": "postgraduateDegree"
};
const normalizedIncomeJson = {
    "Prefer not to say": "preferNotToSay",
    "Under minimum wage": "underMinWage",
    "Between minimum wage and average wage": "betweenMinAndAvgWage",
    "1× – 1.5× average wage": "between1xand1_5xAvgWage",
    "1.5× – 2× average wage": "between1_5xand2xAvgWage",
    "Over 2× average wage": "moreThan2xAvgWage"
};
const normalizedEmploymentStatusJson = {
  "Prefer not to say": "preferNotToSay",
  "Student": "student",
  "Unemployed": "unemployed",
  "Self-Employed": "selfEmployed",
  "Employed": "employed",
  "Retired": "retired"
};

const width = 800; // px
const height = 600; // px

const chartCallback = (ChartJS) => {
    // You can register plugins here if needed
};

const chartJSNodeCanvas = new ChartJSNodeCanvas({
    width,
    height,
    chartCallback,
    type: 'jpeg' // Set type for JPEG output
});

const configuration = {
    type: 'line',
    data: {
        labels: [],
        datasets: [{
            label: '',
            data: [],
            fill: false,
            borderColor: '#36A2EB',
            borderWidth: 2,
        }]
    },
    options: {
        plugins: {
            title: {
                display: false,
                text: 'Sample Chart'
            }
        }
    }
};

async function readCSV(filePath) {
  return new Promise((resolve, reject) => {
    const results = [];

    fs.createReadStream(filePath)
      .pipe(csv({ headers, skipLines: 1 }))
      .on('data', (data) => results.push(data))
      .on('end', () => resolve(results))
      .on('error', (err) => reject(err));
  });
}

(async () => {
    let writeToFileString = "";
    const results = await readCSV('statistics.csv');
    
    writeToFileString += "# Statistics:\n";

    console.log(`Total entries: ${results.length}`);
    statistics.totalEntries = results.length;
    console.log('Processing entries...');

    results.forEach((result) => {
        const match = result.Score.match(/^(\d+)/);
        result.Score = match ? parseInt(match[1], 10) : null;
        result.Region = normalizeLocationJson[result.Region] || 'prefer_not_say';
        result.Age = normalizedAgeJson[result.Age] || 'preferNotToSay';
        result.Gender = normalizeGenderJson[result.Gender] || 'preferNotToSay';
        result.Education = normalizedEducationJson[result.Education] || 'preferNotToSay';
        result.Income = normalizedIncomeJson[result.Income] || 'preferNotToSay';
        result.EmploymentStatus = normalizedEmploymentStatusJson[result.EmploymentStatus] || 'preferNotToSay';

        //statistics
        statistics.gender[result.Gender].score += result.Score;
        statistics.gender[result.Gender].count += 1;
        statistics.age[result.Age].score += result.Score;
        statistics.age[result.Age].count += 1;
        statistics.education[result.Education].score += result.Score;
        statistics.education[result.Education].count += 1;
        statistics.income[result.Income].score += result.Score;
        statistics.income[result.Income].count += 1;
        statistics.employmentStatus[result.EmploymentStatus].score += result.Score;
        statistics.employmentStatus[result.EmploymentStatus].count += 1;
        statistics.location[result.Region].score += result.Score;
        statistics.location[result.Region].count += 1;
        statistics.score[result.Score] += 1;
    });


    console.log('First 5 entries:');
    results.slice(0, 5).forEach((entry, index) => {
        console.log(`Entry ${index + 1}:`, entry);
    }); 
    const averageScore = results.reduce((sum, entry) => sum + (entry.Score || 0), 0) / results.length;
    console.log('Average Score:', averageScore.toFixed(2));

   
    writeToFileString += `- Average Score: ${averageScore.toFixed(2)}\n`;
    writeToFileString += `- Total Entries: ${statistics.totalEntries}\n\n`;

    console.log('Statistics:');
    console.log('Total Entries:', statistics.totalEntries);
    console.log("AGE:");


    writeToFileString += await generateTableAndChart(configuration, statistics.age, 'Age Group');    
    writeToFileString += await generateTableAndChart(configuration, statistics.gender, 'Gender');  
    writeToFileString += await generateTableAndChart(configuration, statistics.education, 'Education');
    writeToFileString += await generateTableAndChart(configuration, statistics.income, 'Income');
    writeToFileString += await generateTableAndChart(configuration, statistics.employmentStatus, 'Employment Status');
    writeToFileString += await generateTableAndChart(configuration, statistics.location, 'Location');  
    writeToFileString += "\n";
    
      
    configuration.data.labels = [];
    configuration.data.datasets[0].data = [];

    
    writeToFileString += `## Score:\n`;
    writeToFileString += ` | Score | Count | \n`;
    writeToFileString += " | --- | --- |\n";

    configuration.data.datasets[0].label = "Score Statistics - Total Score";
    Object.entries(statistics.score).forEach(([key, value]) => {
        console.log(`\t - ${key.padEnd(15, ' ')} -\t ${value}`);
        writeToFileString += `| ${key.padEnd(15, ' ')} |${value} |\n`;
        configuration.data.labels.push(key);
        configuration.data.datasets[0].data.push(value);
    });
    let chartName = 'score.jpg';
    await generateChartImage(configuration, chartName);
    writeToFileString += "\n";
    writeToFileString += ` ![${configuration.data.datasets[0].label}](${chartName}) |\n\n`;

    
    
    fs.writeFileSync('statistics.md', writeToFileString, 'utf8');
})().catch((error) => {
    console.error('Error processing CSV:', error);
});


async function generateChartImage(configuration, fileName) {
    try {
        const image = await chartJSNodeCanvas.renderToBuffer(configuration, 'image/jpeg');
        fs.writeFileSync(fileName, image);
        console.log(`✅ Chart saved as ${fileName}`);
    } catch (error) {
        console.error('❌ Failed to generate chart image:', error);
    }
}

async function generateTableAndChart(configuration, statistics, title) {
    configuration.data.labels = [];
    configuration.data.datasets[0].data = [];
    let configBackup = JSON.parse(JSON.stringify(configuration));

    let writeToFileString = "";

    writeToFileString += `## ${title.toUpperCase()}:\n`;
    writeToFileString += ` | ${title} | Score total | Count | Average Score |\n`;
    writeToFileString += " | --- | --- | --- | --- |\n";

    configuration.data.datasets[0].label = title + " Statistics - Total Score";
    Object.entries(statistics).forEach(([key, value]) => {
        let averageScore = (value.score / value.count).toFixed(2);
        console.log(`\t - ${key.padEnd(15, ' ')} -\t ${value.score} (Count: ${value.count})`);
        writeToFileString += `| ${key.padEnd(15, ' ')} | ${value.score} | ${value.count} | ${averageScore} |\n`;
        configuration.data.labels.push(key);
        configuration.data.datasets[0].data.push(value.score);
        configBackup.data.labels.push(key);
        configBackup.data.datasets[0].data.push(averageScore);
    });
    let chartName = title.replace(/ /g, "_") + '_total_score.jpg';
    await generateChartImage(configuration, chartName);
    writeToFileString += "\n";
    writeToFileString += ` | Total Score | Average Score |\n`;
    writeToFileString += " | --- | --- |\n";
    writeToFileString += ` | ![${configBackup.data.datasets[0].label}](${chartName}) |`;

    configBackup.data.datasets[0].label = title + " Statistics - Average Score";
    //configBackup.data.datasets[0].backgroundColor = [ 'rgba(255, 206, 86, 0.5)'];
    chartName = title.replace(/ /g, "_") + '_average_score.jpg';
    await generateChartImage(configBackup, chartName);
    writeToFileString += ` ![${configBackup.data.datasets[0].label}](${chartName}) |\n\n`;

    return writeToFileString;
}